#!/usr/bin/perl -w

BEGIN {
  unshift @INC, ($::ENV{"BUILD_DIR"} || "/usr/lib/build");
}

use strict;
use Digest::MD5;
use File::Path;
use Getopt::Long;
use Build::Deb;
use Build::Debrepo;

Getopt::Long::Configure("no_ignore_case");

my $cachedir = "/var/cache/build";
my $archpath;

sub getreponame {
  my ($url) = @_;
  return $1 if "/$url/" =~ /.*\/([^\/]+)\/os\//;
  return undef;
}

my $pkgnum = 0;

sub printpkginfo {
  my ($d, $repourl)  = @_;

  for (qw{name version location arch}) {
    return unless defined $d->{$_};
  }
  $pkgnum++;
  my $id = "$d->{'name'}.$d->{'arch'}-$pkgnum/0/0";
  print "F:$id: $repourl$d->{'location'}\n";
  my $evr = $d->{'version'};
  $evr = "$d->{'epoch'}:$evr" if $d->{'epoch'};
  $evr = "$evr-$d->{'release'}" if defined $d->{'release'};
  if (defined $d->{'provides'}) {
    print "P:$id: ".join(' ', @{$d->{'provides'}})." $d->{'name'} (= $evr)\n";
  } else {
    print "P:$id: $d->{'name'} (= $evr)\n";
  }
  print "R:$id: ".join(' ', @{$d->{'requires'}})."\n" if $d->{'requires'};
  print "C:$id: ".join(' ', @{$d->{'conflicts'}})."\n" if $d->{'conflicts'};
  print "I:$id: $d->{'name'}-$evr 0\n";
}

GetOptions('cachedir=s'  => \$cachedir, 'archpath=s' => \$archpath) or exit(1);

if (!$archpath) {
  $archpath = `uname -p` || 'unknown';
  chomp $archpath;
}
my $basearch = $archpath;
$basearch =~ s/:.*//;
$basearch = Build::Deb::basearch($basearch);

for my $url (@ARGV) {
  die("$url: not an remote debian repo\n") unless $url =~ /^(:?ftps?|https?):\/\/([^\/]*)\/?/;
  my $reponame = getreponame($url);
  my $repoid = Digest::MD5::md5_hex($url);
  my $dir = "$cachedir/$repoid";

  my @components;
  my $baseurl = $url;

  if ($url =~ /^(.*\/)\.(\/.*)?$/) {
    # flat repo
    $baseurl = $1;
    @components = ('.');
    $url = defined($2) ? "$1$2" : $1;
    $url .= '/' unless $url =~ /\/$/;
  } else {
    if ($url =~ /([^\/]+)$/) {
      @components = split(/[,+]/, $1);
      $url =~ s/([^\/]+)$//;
    }
    push @components, 'main' unless @components;
    $url .= '/' unless $url =~ /\/$/;
    $url =~ s/([^\/]+\/)$/dists\/$1/;
  }

  File::Path::mkpath($dir);
  for my $component (@components) {
    unlink("$dir/Packages.gz");
    if ($component eq '.') {
      system($INC[0]."/download", $dir, "${url}Packages.gz");
      die("Packages.gz missing\n") unless -s "$dir/Packages.gz";
    } else {
      system($INC[0]."/download", $dir, "$url$component/binary-$basearch/Packages.gz");
      die("Packages.gz missing for basearch $basearch, component $component\n") unless -s "$dir/Packages.gz";
    }
    Build::Debrepo::parse("$dir/Packages.gz", sub { printpkginfo($_[0], $baseurl) });
  }
}
