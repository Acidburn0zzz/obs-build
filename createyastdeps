#!/usr/bin/perl -w

################################################################
#
# Copyright (c) 1995-2014 SUSE Linux Products GmbH
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program (see the file COPYING); if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
#
################################################################

BEGIN {
  unshift @INC, ($::ENV{'BUILD_DIR'} || '/usr/lib/build');
}

use Build;
use Build::Susetags;
use Getopt::Long;

use strict;

Getopt::Long::Configure("no_ignore_case");

sub callback {
  my ($pkg, $url, $datadir) = @_;
  return if $pkg->{'arch'} eq 'src' || $pkg->{'arch'} eq 'nosrc';
  # add self provides (rpm3 misses that)
  $pkg->{'provides'} ||= [];
  my $n = $pkg->{'name'};
  if (!grep(/^\Q$n\E( =.*)?$/, @{$pkg->{'provides'}})) {
    my $evr = "$pkg->{'version'}-$pkg->{'release'}";
    $evr = "$pkg->{'epoch'}:$evr" if $pkg->{'epoch'};
    push @{$pkg->{'provides'}}, "$n = $evr";
  }
  $url =~ s/1\/$/$pkg->{'medium'}/ if $pkg->{'medium'}; # multi cd support hack
  my $id = sprintf("%s.%s-%d/%d/%d: ", $pkg->{'name'}, $pkg->{'arch'}, $pkg->{'buildtime'}, 0, 0);
  print "F:$id${url}$datadir/$pkg->{'location'}\n";
  print "P:$id".join(' ', @{$pkg->{'provides'}})."\n";
  print "R:$id".join(' ', @{$pkg->{'requires'}})."\n" if $pkg->{'requires'};
  print "C:$id".join(' ', @{$pkg->{'conflicts'}})."\n" if $pkg->{'conflicts'};
  print "O:$id".join(' ', @{$pkg->{'obsoletes'}})."\n" if $pkg->{'obsoletes'};
  my $tag = sprintf("%s-%s-%s %s", $pkg->{'name'}, $pkg->{'version'}, $pkg->{'release'}, $pkg->{'buildtime'});
  print "I:$id$tag\n";
}

my $opt_zypp;
my $cachedir = "/var/cache/build";

GetOptions ("zypp=s" => \$opt_zypp, "cachedir=s" => \$cachedir) or exit(1);

for my $url (@ARGV) {
  my $dir = $opt_zypp ? $opt_zypp : $url;
  $dir .= '/' unless $dir =~ /\/$/;
  $url .= '/' unless $url =~ /\/$/;

  # XXX: use descrdir/datadir from content file
  my $descrdir = 'suse/setup/descr';
  my $datadir = 'suse';
  my $packages = "$dir$descrdir/packages";
  $packages = "$packages.gz" if ! -e $packages && -e "$packages.gz";
  Build::Susetags::parse($packages, sub { callback($_[0], $url, $datadir) });
}

